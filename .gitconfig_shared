[alias]
	# Force push but don't overwrite if the remote has been updated
	pushf = push --force-with-lease
	# --
	# Don't show json files in the diff
	show-no-json = diff HEAD~1 -- . ':(exclude)*.json'
	# --
	# Stash unstaged changes only
	stashu = stash -k -u
	main-sync = "!f() { git pull --rebase --autostash origin ${1:-master};}; f"
	delete-merged = "!f() { local targetBranch=${1:-master} && git checkout -q $targetBranch && git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done; }; f"
	# --
	# Switch back to the previous branch
	back = switch -
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
	editor = vim
[fetch]
    prune = true
[merge]
	tool = diffmerge
[mergetool "vscode"]
	cmd = "code --wait $MERGED"
[diff]
	tool = diffmerge
[difftool "vscode"]
	cmd = "code --wait --diff $LOCAL $REMOTE"
[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
	trustExitCode = true
[mergetool]
	keepBackup = false
[color]
	ui = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green
	newHighlight = green 22
[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green
	whitespace = red reverse
[rerere]
	enabled = 1
[pull]
	ff = only
[init]
	defaultBranch = main
[commit]
	gpgsign = true
[gpg]
	program = gpg
